#!/bin/python

import sys
import os
import wave
import struct

class WaveImporter:

    def __init__(self):
        self.BITE_SIZE = 64
        self.FILE_HEADER = '''
/*
 * {0}.c
 *
 * File generated by import-wav.py
 * written by Broderick Gardner, Benjamin Gardner, and Claudilla Cruz
 *
 * Audiofile source:
 * {1}
 */

#include "xil_types.h"
#include "{0}.h"

static const u16 sound[];

const struct sound {0}_sound = {{ .rate = {2}, .frame_count = {3}, .data = sound }};

static const u16 sound[] = {{
'''
        self.HEADER_FILE = '''
/*
 * {0}.h
 *
 * File generated by import-wav.py
 * written by Broderick Gardner, Benjamin Gardner, and Claudilla Cruz
 *
 * Audiofile source:
 * {1}
 */

#ifndef {2}_H_
#define {2}_H_

#include "sounds.h"

extern const struct sound {0}_sound;

#endif /* {2}_H_ */

        '''
        pass

    def convert_file(self,wav_file,filename):
        prefix = os.path.splitext(filename)[0]
        with open(filename,'w') as f, wave.open(wav_file) as wav:
            print('byte depth : {}'.format(wav.getsampwidth()))
            print('channels: {}'.format(wav.getnchannels()))
            f.write(self.FILE_HEADER.format(prefix,wav_file,wav.getframerate(),wav.getnframes()))

            next = ''
            for chunk in self._gen_frames(wav):
                if next != '':
                    f.write('{},\n'.format(next))
                next = chunk
            f.write('{}\n}};\n\r'.format(next))
        with open(prefix+'.h','w') as fh:
            fh.write(self.HEADER_FILE.format(prefix,wav_file,prefix.upper()))

    def _gen_frames(self,wav):
        frames = wav.readframes(self.BITE_SIZE)
        channels = wav.getnchannels()
        nbytes = wav.getsampwidth()
        if nbytes == 1:
            fmt = '<'+channels*'B'
        elif nbytes == 2:
            fmt = '<'+channels*'H'
        else:
            print('Different than 1 or 2 bytes, wut')
            exit(0)
        print("unpack format: {}".format(fmt))
        while frames != b'':
            print("buffer size: {}".format(len(frames)))
            dat = struct.iter_unpack(fmt,frames)
            dat_list = [str(x[0]) for x in dat]
            yield ', '.join(dat_list)
            frames = wav.readframes(self.BITE_SIZE)


def main():
    if len(sys.argv) < 3:
        print('Too few arguments')
        print('command: python3 import-wav.py [in.wav] [out.c]')
        return
    importer = WaveImporter()
    importer.convert_file(str(sys.argv[1]),sys.argv[2])

if __name__ == "__main__":
    main()
